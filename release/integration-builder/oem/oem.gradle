task prepareOEM() << {
    def destination = "${project.buildDir}/oem"
    copy {
        from "${project.buildDir}/jsm-integration"
        into "${destination}/jsm-integration"
    }

    copy {
        from "${project.projectDir}/oem/scripts/send2jsm.go"
        into "${destination}/oem"
    }

    copy {
        from "${project.projectDir}/oem/scripts/send2jsm"
        into "${destination}/oem"
    }

    copy {
        from "${project.projectDir}/oem/common/integration.conf"
        into "${destination}/jsm-integration/conf"
    }
}

def buildRpmForOEM(String sourceDir, String name, String descrpt, Map fileMappingInput, Map configFilesInput) {
    def taskName = "generateRpm${sourceDir}"

    def configFiles = [:]
    configFiles.putAll(configFilesInput)
    def fileMapping = [:]
    fileMapping.putAll(fileMappingInput)

    task "${taskName}"(type: Rpm) {
        def packageVersion = project.ext.versions.oem + project.ext.versionSuffix

        packageName = name
        description = descrpt
        summary = descrpt
        packageDescription = descrpt + ". Please see doc for details: https://www.atlassian.com/docs/"
        version = packageVersion.replace("-", ".");
        os = LINUX
        user = 'root'

        release = '1.all'
        packager = "ifountain"
        vendor = "Atlassian"
        url = "https://www.atlassian.com"
        license = "Apache License 2.0"
        buildHost = "repo.atlassian.com"
        packageGroup = "System Administration Tools"


        configFiles.put("${project.buildDir}/${sourceDir}/jsm-integration/conf/integration.conf", 'etc/jsm/conf')

        for (def source : configFiles.keySet()) {
            def dest = configFiles.get(source)
            logger.info("config " + source + " - " + dest)
            from(source) {
                fileType CONFIG | NOREPLACE
                into(dest)
            }
        }

        for(def source : fileMapping.keySet()) {
            def dest = fileMapping.get(source)
            logger.info(source + " - " + dest)
            from(source) {
                into(dest)
            }
        }

        preInstall file("${project.projectDir}/oem/native/ogBefore.sh")
        postInstall file("${project.projectDir}/oem/native/ogAfter.sh")
    }

    tasks[taskName].execute()
}

def buildDebForOEM(String sourceDir, String name, String descrpt, Map fileMappingInput, Map configFilesInput) {

    def packageVersion = project.ext.versions.oem + project.ext.versionSuffix
    packageVersion = packageVersion.replace("-", ".")

    def taskName = "prepareDeb${sourceDir}"
    def dataDir = "${project.buildDir}/debian_tmp/${sourceDir}/data"
    def controlDir = "${project.buildDir}/debian_tmp/${sourceDir}/control"

    def controlTarget = "${project.buildDir}/deb/control"

    //CONTROL
    copy {
        from "${project.projectDir}/oem/native/conffiles_deb"
        into controlDir
        rename "conffiles_deb", "conffiles"
    }

    copy {
        from "${project.projectDir}/oem/native/control_deb"
        filter {
            it.replace('[description]', "'jsm client files'")
                    .replace('[version]', packageVersion)
                    .replace('[package-name]', "jsm-oem")
        }
        into controlDir
        rename "control_deb", "control"
    }

    def configFiles = [:]
    configFiles.putAll(configFilesInput)
    def fileMapping = [:]
    fileMapping.putAll(fileMappingInput)

    task "${taskName}" << {

        fileMapping.put("${project.buildDir}/${sourceDir}/jsm-integration/conf/integration.conf", 'etc/jsm/conf')

        fileMapping.put("${project.buildDir}/${sourceDir}/jsm-integration/conf", 'etc/jsm/conf')

        for(def source : fileMapping.keySet()) {
            def dest = fileMapping.get(source)
            logger.info(source + " - " + dest)
            copy {
                from(source)
                into("${dataDir}/${dest}")
            }
        }

        copy {
            from "${project.projectDir}/oem/native/ogBefore.sh"
            into controlDir
            rename "ogBefore.sh", "preinst"
        }

        copy {
            from "${project.projectDir}/oem/native/ogAfter.sh"
            into controlDir
            rename "ogAfter.sh", "postinst"
        }

        ant {
            taskdef(name: 'deb', classname: 'org.vafer.jdeb.ant.DebAntTask', classpath: configurations.debian.asPath)
        }
        ant.deb(destfile: "${project.buildDir}/distributions/${name}_${packageVersion}_all.deb", control: controlDir) {
            ant.data(src: dataDir, type: 'directory', dst: '/')
        }

        delete "${project.buildDir}/distributions/${name}_${packageVersion}_all.changes"
    }

    tasks[taskName].execute()
}

task packageOEMOS(dependsOn: 'prepareOEM') << {

    def fileMapping = [
            "${project.projectDir}/oem/scripts/send2jsm"   : "etc/jsm",
            "${project.projectDir}/oem/scripts/send2jsm.go": "etc/jsm"
    ]

    buildRpmForOEM('oem', 'jsm-oem', 'JSM - OEM integration files',
            fileMapping, [:])

    buildDebForOEM('oem', 'jsm-oem', 'JSM - OEM integration files', fileMapping, [:])

}

task oem(dependsOn: 'packageOEMOS')
